package org.jutil.event;


import java.util.EventListener;


/**
 * <p>This model type introduces a model method which can be used to
 *   describe the validity of EventListener instances in a class.</p>
 *
 * @path    $Source$
 * @version $Revision$
 * @date    $Date$
 * @state   $State$
 * @author  Jan Dockx
 * @release $Name$
 */
public interface ListenerValidity {

	/* The revision of this class */
	public final static String CVS_REVISION ="$Revision$";

  /**
   * <p>This model inspector can be used as an abstract precondition in
   *   methods using EventLister arguments, limiting which instances are
   *   acceptable.</p>
   * <p>It can be used to transport information about listeners from
   *   the type invariants to the implementation of the method that
   *   uses it as a precondition.</p>
// JDJDJD
// Adding listener != null here would result in \result <== listener != null;,
// because the postcondition needs to be open for strengthening in subtypes.
// This extra information doesn't help us.
   * <p>A typical subtype specification would say that the listener is
   *   of a given subtype of java.util.EventListener. E.g.:</p>
   * <pre>
   * ...
   * /*@
   *   @ also
   *   @   public behavior
   *   @     pre listener != null;
   *   @     post \result <==> listener instanceof <var>EventName</var>Listener;
   *   @ public pure model boolean isValidListener(EventListener listener);
   *   @/
   * ...
   * </pre>
   *
   */
  public behavior
    pre listener != null;
  public pure model boolean isValidListener(EventListener listener);

}